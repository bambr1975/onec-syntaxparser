Var ТестПеременная;
Var ТестПеременнаяЭкспорт Export;

//Стандартный простой комментарий. 
//
Procedure ТестЭкспортФункция(Val Параметры) Export 
	
EndProcedure

// Опсание процедуры с параметрами.
// проверка описания подсказки к параметрам и проверка формирования документации по стандартным 
// параметрам к процедуре 
//	Параметры:
//		ЗнакТабуляции - СправочниСсылка.Номенклатура - станартное описание, через два знака tab для описания параметра. 
//		НоваяФичаТипаСруктуры - Структура - описание структуры опять таки ниже через + описываем ключи и их знаения. 
//			+ КлючСтруктуры - Строка - описание типа 
//			+ КлючБезТипа - тип не указываем, поэтому не знаем то считать это типом, то ли считать описанием. 
//
//	Возвращаемое значение:
//		Булево - Истина/Ложь - описание считаем после двух --, тогда только можно сказать что это описание. 
//
&AtClient
Function СложнаяФункцияСКучейПараметров(Val ЗнакТабуляции, НоваяФичаТипаСруктуры = Неопределено) Экспорт
	Var КакаяТоПеременная;
	
	Проверка(ТестЭкспортФункция1(ЗнакТабуляции)); //Проверка как определит что это локальный вызов. 
	module.ТестЭкспортФункция(ЗнакТабуляции); //Определяем что это вызом экспортной процедуры из файла модуля. 
	
	Return True;
EndFunction

// Текст описания модуля с непонятными строками. 

// ТестСКомментарием
//
Function ТестСКомментарием() 
	
EndFunction

#Region СлужебныйПрограммныйИнтерфейс

// Возвращает аккуратно построеное наименование через запятую по парам "Название" + "Сокращение"
//
Function ПолноеНаименование(Val н0 = "", Val с0 = "", Val н1 = "", Val с1 = "", Val н2 = "", Val с2 = "", Val н3 = "", Val с3 = "", Val н4 = "", Val с4 = "", Val н5 = "", Val с5 = "", Val н6 = "", Val с6 = "", Val н7 = "", Val с7 = "", Val н8 = "", Val с8 = "", Val н9 = "", Val с9 = "") 
	
	// Часть 0

EndFunction

СложнаяФункцияСКучейПараметров();